class Solution {

    int[][] dirs = new int[][] {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    char[][] board;
    char[] word;

    public boolean exist(char[][] boardInput, String wordInput) {
        this.board = boardInput;
        boolean[][] used = new boolean[board.length][board[0].length];
        this.word = wordInput.toCharArray();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                used = new boolean[board.length][board[0].length];
                boolean res = dfs(i, j, 0, used);
                if (res) return true;
            } //for
        } //for
        return false;
    } //exist

    private boolean dfs(int i, int j, int depth, boolean[][] used) {
        if (depth == word.length) return true;
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) return false;
        if (word[depth] != board[i][j]) return false;
        if (used[i][j]) return false;
        used[i][j] = true;
        for (int[] dir : dirs) {
            int x = i + dir[0], y = j + dir[1];
            if (dfs(x, y, depth + 1, used)) return true;
        } //for
        used[i][j] = false;
        return false;
    } //dfs

} //Solution